#!/usr/bin/env python3
import argparse
import os
import subprocess
import yaml

import Configs

default_vars = Configs.tool_path | Configs.design_path

def main():
    parser = argparse.ArgumentParser(description="RTL to GDSII conversion script.")

    parser.add_argument('--step', type=str, required=False, choices=Configs.shell_cmd.keys(), help='to run each chip backend design step')
    parser.add_argument('--config', type=str, required=True, default='top.yaml', help='Configuration YAML file (default: top.yaml)')
    parser.add_argument('--json', type=str, required=False, default='gds.json', help='json form layout gds file')

    args = parser.parse_args()
    default_vars.update({'GDS_JSON_FILE' : args.json})

    with open(args.config, 'r') as config_file:
        '''
        a typical top.yaml file:

            RESULT_DIR: ./gcd_results
            # design settings
            DESIGN_TOP: gcd
            RTL_FILE: /home/wsl/rtl2gds/gcd/gcd.v
            # PDK: sky130
            # key result files
            GDS_FILE: gcd.gds
            # design constrains
            CLK_PORT_NAME: clk
            CLK_FREQ_MHZ:  200
            DIE_AREA:   0  0 120 120
            CORE_AREA: 10 10 110 110
        '''
        default_vars.update(yaml.safe_load(config_file))

    assert (set(default_vars.keys()) == Configs.keywords), "Keys of `default_r2g_vars` MUST match `variables_list`"

    # export_sys_env_variables
    for env_var, value in default_vars.items():
        os.environ[env_var] = value

    # run design steps using subprocess
    if args.step:
        subprocess.call(Configs.shell_cmd[args.step])
    else:
        for step, cmd in Configs.shell_cmd.items():
            retcode = subprocess.call(cmd)
            assert retcode == 0, f"Step {step} failed with return code {retcode}"

if __name__ == "__main__":
    main()