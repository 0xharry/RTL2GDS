import logging
import os
import time
from functools import reduce

from ..chip import Chip
from ..global_configs import ENV_TOOLS_PATH
from ..utils import process


# Uncomment the following lines if you want to run this script directly
# import sys
# sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))
# from src.rtl2gds.chip import Chip
# from src.rtl2gds.global_configs import ENV_TOOLS_PATH
# from src.rtl2gds.tools import process


def timing_eval(
    step_name: str,
    top_name: str,
    result_dir: str,
    sdc_file: str,
    input_netlist: str,
    input_def: str,
    clock_freq: str,
    clock_port_name: str = "clk",
    route_type: str = "HPWL",
    input_lef: str = f'{ENV_TOOLS_PATH["FOUNDRY_DIR"]}/lef',
    db_config: str = f'{ENV_TOOLS_PATH["IEDA_CONFIG_DIR"]}/db_config.json',
):
    # Read the db_config template file
    with open(db_config, "r") as f:
        db_config_content = f.read()

    output_dir_path = f"{result_dir}/evaluation/timing/{step_name}"
    # Replace placeholders in the db_config template
    replace_attrs = {
        "${TOP_NAME}": top_name,
        "${LIB_PATH}": f"{ENV_TOOLS_PATH['FOUNDRY_DIR']}/lib",
        "${LEF_PATH}": input_lef,
        "${DEF_PATH}": input_def,
        "${RESULT_DIR}": result_dir,
        "${SDC_FILE}": sdc_file,
        "${NETLIST_FILE}": input_netlist,
        "${CONFIG_PATH}": f"{ENV_TOOLS_PATH['IEDA_CONFIG_DIR']}/../..",
        "${OUTPUT_DIR_PATH}": f"{result_dir}/evaluation/timing/{step_name}",
    }

    db_config_content = reduce(process.replace_one, replace_attrs.items(), db_config_content)

    # Write the processed db_config to a new file
    processed_json_path = f"{output_dir_path}/db_config.json"
    os.makedirs(os.path.dirname(processed_json_path), exist_ok=True)
    with open(processed_json_path, "w") as f:
        f.write(db_config_content)

    # Define the artifacts to be generated
    artifacts = {
        "report": f"{output_dir_path}/{step_name}_timing_power_report.json",
    }

    # Prepare environment variables
    # Need to set the environment variables for the variables used in the tcl scripts
    shell_env = {
        "TOP_NAME": top_name,
        "RESULT_DIR": result_dir,
        "SDC_FILE": sdc_file,
        "NETLIST_FILE": input_netlist,
        "INPUT_DEF": input_def,
        "INPUT_LEF": input_lef,
        "CLK_PORT_NAME": clock_port_name,
        "CLK_FREQ_MHZ": clock_freq,
    }

    shell_cmd = [
        "timing_app",
        processed_json_path,
        route_type,
        "-o",
        artifacts["report"],
    ]

    logging.info(
        "(timing_evaluation) \n subprocess cmd: %s \n subprocess env: %s",
        str(shell_cmd),
        str(shell_env),
    )

    shell_env.update(ENV_TOOLS_PATH)

    # Run the command
    process.cmd_run(
        shell_cmd,
        shell_env,
        period_name="timing_evaluation",
        log_path=f"{output_dir_path}/{step_name}_timing_eval.log",
    )

    return artifacts


def run(chip: Chip):
    """Run the timing evaluation for the given chip. Only for the testing purpose.
    Args:
        chip (Chip): The Chip object containing the configuration and paths.
    """
    start_time = time.perf_counter()

    logging.info("Evaluation starting...")
    # Get the config
    timing_eval(
        step_name="test_step",
        top_name=chip.top_name,
        result_dir=chip.path_setting.result_dir,
        sdc_file=chip.path_setting.sdc_file,
        input_netlist=chip.path_setting.netlist_file,
        input_def=chip.path_setting.def_file,
        clock_freq="200",
    )
    logging.info("Evaluation finished.")
    end_time = time.perf_counter()
    logging.info("Total elapsed time: %.2f seconds", end_time - start_time)


if __name__ == "__main__":
    # Example usage
    config_dict = {
        "top_name": "gcd",
        "rtl_file": "gcd.v",
        "clk_port_name": "clk",
        "clk_freq_mhz": 200,
        "die_bbox": "0 0 120 120",
        "core_bbox": "0 0 120 120",
        "result_dir": "rtl2gds_result",
    }
    chip = Chip(config_dict=config_dict)
    chip.path_setting.result_dir = "rtl2gds_result"
    chip.path_setting.sdc_file = "default.sdc"

    # Set the path to the netlist and DEF files, these should be generated by the previous steps, e.g., cts
    chip.path_setting.netlist_file = (
        f'{ENV_TOOLS_PATH["RTL2GDS_ROOT_DIR"]}/design_zoo/gcd/gcd_results/gcd_cts.v'
    )
    chip.path_setting.def_file = (
        f'{ENV_TOOLS_PATH["RTL2GDS_ROOT_DIR"]}/design_zoo/gcd/gcd_results/gcd_cts.def'
    )
    chip.update2config(save_yaml=True)

    run(chip)
